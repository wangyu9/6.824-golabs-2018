package mapreduce

import (
	"hash/fnv"
	//
	"os"
	//"io/ioutil"
	"fmt"
	"encoding/json"
	//"log"
	//"bytes"
)


func doMap(
	jobName string, // the name of the MapReduce job
	mapTask int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(filename string, contents string) []KeyValue,
) {
	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
	// Your code here (Part I).
	//

	//
	// doMap manages one map task: it should read one of the input files
	// (inFile), call the user-defined map function (mapF) for that file's
	// contents, and partition mapF's output into nReduce intermediate files.
	//
	// There is one intermediate file per reduce task. The file name
	// includes both the map task number and the reduce task number. Use
	// the filename generated by reduceName(jobName, mapTask, r)
	// as the intermediate file for reduce task r. Call ihash() (see
	// below) on each key, mod nReduce, to pick r for a key/value pair.
	//

	// debug("doMap(%s,%d,%s,%d)", jobName, mapTask, inFile, nReduce)

	// https://stackoverflow.com/questions/36111777/golang-how-to-read-a-text-file
	// With ReadFile
	// There is no need to close the file according to https://forum.golangbridge.org/t/reading-a-text-file/3534
	/*
	file, err := ioutil.ReadFile( inFile)
	if err != nil {
		fmt.Println("Error: Openning file %s failed", inFile)
	}
	contents := string(file)
	*/

	file, err := os.Open(inFile)
	if err != nil {
		// log.Fatal(err)
		fmt.Println("Error: Openning file %s failed", inFile)
	}
	defer file.Close()

	info, err := file.Stat()

	raw := make([]byte, info.Size())
	file.Read(raw)

	contents := string(raw)

	// The first argument should be the input file name, though the map function
	// The second argument should be the entire input file contents.
	results := mapF( inFile, contents)
	// mapF() returns a slice containing the key/value pairs for reduce

	// Now partition mapF's output into nReduce intermediate files.

	encoders := make( []*json.Encoder, nReduce)
	// Initialize the intermediate files.
	// There is one intermediate file per reduce task.
	for i, _ := range encoders {

		filename := reduceName( jobName, mapTask, i)
		// The file name includes both the map task number and the reduce task number.
		// Use the filename generated by reduceName(jobName, mapTask, r) as the intermediate file for reduce task r.

		file, err := os.Create( filename)

		if err == nil {
			encoders[i] = json.NewEncoder(file)
			defer file.Close()
		} else {
			fmt.Println("Creating file %s failed", filename)
		}
	}

	for _, pair := range results {
		// r decides which reduce task it goes to.
		r := ihash( pair.Key) % nReduce
		// Call ihash() (see below) on each key, mod nReduce, to pick r for a key/value pair.
		encoders[r].Encode(pair)
	}

}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}