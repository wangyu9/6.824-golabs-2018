package mapreduce

import (
	"os"
	"encoding/json"
	"fmt"
	//
	"sort"
)


func doReduce(
	jobName string, // the name of the whole MapReduce job
	reduceTask int, // which reduce task this is
	outFile string, // write the output here
	nMap int, // the number of map tasks that were run ("M" in the paper)
	reduceF func(key string, values []string) string,
) {
	//
	// doReduce manages one reduce task: it should read the intermediate
	// files for the task, sort the intermediate key/value pairs by key,
	// call the user-defined reduce function (reduceF) for each key, and
	// write reduceF's output to disk.
	//
	// You'll need to read one intermediate file from each map task;
	// reduceName(jobName, m, reduceTask) yields the file
	// name from map task m.
	//
	// Your doMap() encoded the key/value pairs in the intermediate
	// files, so you will need to decode them. If you used JSON, you can
	// read and decode by creating a decoder and repeatedly calling
	// .Decode(&kv) on it until it returns an error.
	//
	// You may find the first example in the golang sort package
	// documentation useful.
	//
	// reduceF() is the application's reduce function. You should
	// call it once per distinct key, with a slice of all the values
	// for that key. reduceF() returns the reduced value for that key.
	//
	// You should write the reduce output as JSON encoded KeyValue
	// objects to the file named outFile. We require you to use JSON
	// because that is what the merger than combines the output
	// from all the reduce tasks expects. There is nothing special about
	// JSON -- it is just the marshalling format we chose to use. Your
	// output code will look something like this:
	//
	// enc := json.NewEncoder(file)
	// for key := ... {
	// 	enc.Encode(KeyValue{key, reduceF(...)})
	// }
	// file.Close()
	//
	// Your code here (Part I).
	//


	// 1. Read the intermediate files for the task,


	imfs := make(map[string] []string)

	for m:=0; m<nMap; m++ {
		// You'll need to read one intermediate file from each map task;
		// reduceName(jobName, m, reduceTask) yields the file
		// name from map task m.

		filename := reduceName( jobName, m, reduceTask)
		// The file name includes both the map task number and the reduce task number.
		// Use the filename generated by reduceName(jobName, mapTask, r) as the intermediate file for reduce task r.

		file, err := os.Open( filename)

		if err == nil {
			dec := json.NewDecoder(file)
			for {
				var kv KeyValue
				err = dec.Decode(&kv)
				if err != nil {
					break
				}
				// fmt.Println("Denocding:", kv)
				imfs[kv.Key] = append( imfs[kv.Key], kv.Value)
				// Not sure if this array append is really efficient for dynamic usage.
			}
			file.Close()
		} else {
			fmt.Println("Openning file %s failed", filename)
		}
	}


	// 2. Sort the intermediate key/value pairs by key,

	// Sort map by keys: https://blog.golang.org/go-maps-in-action#TOC_7.
	var keys []string
	for key := range imfs {
		keys = append(keys, key)
	}

	sort.Strings(keys)


	// 3. Call the user-defined reduce function (reduceF) for each key
	// 4. And simultaneously write reduceF's output to disk.

	file, err := os.Create( outFile)
	enc := json.NewEncoder(file)
	if err == nil {
		defer file.Close()
	} else {
		fmt.Println("Openning file %s failed", outFile)
	}

	for i, _ := range keys {
		// reduceF() is the application's reduce function. You should
		// call it once per distinct key, with a slice of all the values
		// for that key. reduceF() returns the reduced value for that key.
		enc.Encode(KeyValue{keys[i], reduceF( keys[i], imfs[keys[i]])})
	}
}